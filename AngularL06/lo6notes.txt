App Module
Below is an example of what the app.module.ts file looks like in a newly created Angular project:

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppComponent } from './app.component';

@NgModule({
    declarations: [AppComponent],
    imports: [BrowserModule],
    providers: [],
    bootstrap: [AppComponent]
})
export class AppModule {}
Caution!
Above, is a valid example of code, but please do not copy the code into a project. This example is just for explanation. A little later in the lesson, you will be adding code into a starter project.

The first thing listed in this file are the import statements, which you have seen before.
Next is the main module decorator, @NgModule. The @NgModule decorator tells Angular to compile and launch the application based on the specifications that are set forth.
Within the @NgModule decorator are several properties set to arrays. Currently, what is listed is the minimal amount of metadata generated by the CLI. As you have seen, this is where you will add anything that needs to be used in a module. Below are descriptions of each property within the @NgModule decorator:
Declarations: Let the compiler know what components in the application are being used. While you can have additional components in the source code, if they are not included in the declarations, they will not be functional.
Imports: Imports are all the modules that need to be included in the application for it to function properly. They come by default with the BrowserModule, because it is essential to all Angular applications.
Providers: An array for supplying concrete versions of a service to the Angular application globally. Rather than injecting it into each service and component individually, the providers' array will make it available to all.
Bootstrap: Tells the application what to insert into the browser DOM. For each component in the bootstrap array, there will be a separate DOM element. Each bootstrapped element should be the base of its own tree of components. Although it is possible to bootstrap multiple components, typically an application will only bootstrap one component at a time.

**Angular modules are denoted:: by prefixing a class with @NgModule()
**For angular apps it is recommended to grouop functionality for a feature as a:: module

Next




Common Angular Modules
Angular includes some pre-built modules that are packaged and provided by its makers. In the documentation, these modules are referred to as packages and contain some valuable logic needed to build an application. Things like animation, forms, routing, testing, and HTTP capabilities come prepackaged in Angular for use by developers.

When you create a new Angular application using the Angular CLI, some of these packages are automatically included in the project.

Core Package
The Core Package in Angular is arguably the most important module in an application. This package is where you get the functionality to build the core concepts in Angular; components, injectables, and @NgModules are provided to you by the Core Package in Angular.

You can find examples of Core Package used throughout any Angular project created with the Angular CLI tool. Below, are examples of import statements using this package within different files you have used previously.

app.component.ts file:

import { Component } from '@angular/core';
message-form.component.ts file:

import { Component, OnInit } from '@angular/core';
app.module.ts file:

import { NgModule } from '@angular/core';
app.component.spec.ts file:

import { TestBed, async } from '@angular/core/testing';
Each of these statements are importing from @angular/core.

Common Package
The Common Package in Angular provides functionality that is seen as commonly-used in the development of applications using Angular. All the directives provided by Angular are provided through the common package. Directives like ngIf, ngSubmit, ngClass, ngFor, and ngSwitch are part of the common package. Pipes, date, time functionality, and location functionality are also provided by the common package.

HTTP Common Package
HTTP means HyperText Transfer Protocol. It's the underlying protocol used on the web to define how messages are formatted and transmitted. HTTP is the key to sending and receiving information and data to and from another source or site.

HTTP in Angular is accomplished with the help of the HTTP package which is a part of the Common Package. In a future lesson within this course, you will learn how to use the HTTPClient and the HTTPHeaders to communicate with a server.

Router Package
Routing is a conditional rendering that is based on the current state of your application. Generally this change is done in one of three ways:

Enter a URL in the address bar and the browser navigates to a corresponding page.
Click links on a page and the browser navigates to a corresponding page.
Click the browser's back and forward buttons, and the browser navigates back and forth through the history of pages you've previously visited.
The Angular Router builds upon these basic ideas and adds these processes to Angular through the Router Package.

The next lesson covers how to accomplish Routing and Navigation in an Angular application using the Router Package.




Next

Creating a Module
During this section, you will be working to update the starter project and reorganize the pieces of the application to add new modules. The starter project includes all of the code you have worked within the previous lessons. There is a message-form component, a skills component, and a greeting component, as well as the base component. You will be working to convert these to include modules. Generally, modules are used to organize an application into cohesive blocks of functionality. In this case, you have various pieces contributing to your skills, so you will group those together. To create a module, you will need to reorganize the structure of your files. Each module should have a specific folder, and within the folder should be the various parts required in the module (i.e., SkillsComponent, SkillsService, skill, etc.).

During this example you will be working specifically with the skills component since it has a model, a service, and the component itself. Adding all of the parts into a module will help you understand how the parts of your application work together. You will also practice moving files and handle the issues that can happen when changing file locations.

Caution!
By changing the organization of your application, parts of the app will break, this means you will need to fix broken links (file paths etc.) so your application renders correctly. But don't worry, the broken links will be fixed in this section.

Next



Reorganize the Project
Below, are the steps to reorganize the provided starter project to include modules.

First, make sure you have the AngularL06 folder open within VS Code.

Below you will see two trees which represent the current and proposed file structure for an application. Take a moment to look at the existing structure and compare it to the proposed structure. For now, make a note of the differences, and don't change anything. The structure below is showing the files within the src/app folder.

src/app folder, current structure:

- greeting
    - greeting.component.css
    - greeting.component.html
    - greeting.component.spec.ts
    - greeting.component.ts
- message-form
    - message-form.component.css
    - message-form.component.html
    - message-form.component.spec.ts
    - message-form.component.ts
- models
    - skill.ts
    - message.ts
- services
    - skills.service.spec.ts
    - skills.service.ts
- skills
    - skills.component.css
    - skills.component.html
    - skills.component.spec.ts
    - skills.component.ts
- types
    - level.enum.ts
- app.component.css
- app.component.html
- app.component.spec.ts
- app.component.ts
- app.module.ts
src/app folder, proposed structure:

- modules (NEW)
    - skills
        - components (NEW)
            - skills
                - skills.component.css
                - skills.component.html
                - skills.component.spec.ts
                - skills.component.ts
        - services
            - skills.service.spec.ts
            - skills.service.ts
        - skills.module.spec.ts
        - skills.module.ts
- shared (NEW)
    - components(NEW)
        - greeting
            - greeting.component.css
            - greeting.component.html
            - greeting.component.spec.ts
            - greeting.component.ts
        - message-form
            - message-form.component.css
            - message-form.component.html
            - message-form.component.spec.ts
            - message-form.component.ts
    - models
        - skill.ts
        - message.ts
    - types
        - level.enum.ts
- app.component.css
- app.component.html
- app.component.spec.ts
- app.component.ts
- app.module.ts
Notice the new folders that are created: components, modules, and shared.
Now that a plan is in place for the layout, create a new module using the Angular CLI by entering the following command into the built-in terminal within VS Code.

ng g m modules/skills
Remember that g stands for generate. The m stands for module.
This will generate a new module named skills.
Inside the newly generated modules folder, there are two files: skills.module.ts and skills.module.spec.ts. Open the skills.module.ts file, and you will notice that it is very similar to the main app.module.ts file, which is the backbone of the application.

Move Files
During this section, you will be moving folders into new folders. This process will change your file structure to match the above, proposed file structure. Follow the steps below carefully:

First, within the app folder, create a new folder named shared.

You can do this by right-clicking on the app folder and choosing New Folder.
Next, within the shared folder, create a new folder named components.

Move the greeting and message-form folders within the shared/components folder.

Do this by clicking and dragging each of the above folders.
After doing this, you will see that you are getting errors within the message-form folder, this is because the file path is now incorrect. This error be fixed in the next section.
Move the models folder into the shared folder.

Move the types folder into the shared folder.

Create a new folder within the modules/skills folder named components.

Move the skills component into the modules/skills/components folder.

The skills component includes the following files:
skills.component.css
skills.component.html
skills.component.spec.ts
skills.component.ts
Next, move the services folder into the modules/skills folder.

Now that you have moved the necessary files, your structure should now look like the following:

Screenshot of a page of open L6 editors. The angular L6 starter is open showing the hierarchy of the web page content.Figure 6-1: Moved Files

If you run the server with ng serve, you will see many errors in the console, as shown below:

Lines of code including chunks and errors.Figure 6-2: Errors

Next

Change File Paths
Now that you have moved all of these files and folders, you need to fix the file paths within the files.

Before you continue, below is a short review of relative path structure within projects.

It is easy to forget what the difference between ./ and ../ is. Below is a tree structure of a basic project:

- app
    - src
        - script.ts
        - index.ts
    - components
        - flowers.ts
If you were within the script.ts file and needed to access a function (named testFunction) within the index.ts file, how would you do so? You would do so with an import statement similar to import { testFunction } from './index.ts.
The ./ syntax is accessing a sister file or a file that lives within the same folder.
If you were within the flowers.ts file and needed to access the same function located in the index.ts file, how would you access it? Well, you would use the ../ syntax. The import statement would look like import { testFunction } from '../src/index.ts file.
The ../ syntax will bring you up a level or out of your current folder.
Remember: ./ allows you to access information within a sister file within the same folder. ../ allows you to access files outside of your current folder.
Currently, you should be getting errors within the following files:

app/modules/skills/skills.module.ts
app/shared/components/message-form/message-form.component.ts
src/app/modules/skills/components/skills/skills.component.ts
src/app/modules/skills/services/skills.service.ts
app/app.module.ts
Follow the steps below to fix each of these files' paths.

Skills Component and Service
Now that you have moved files, you need to fix the file paths within your SkillsComponent and SkillsService. Follow the below steps.

Within the modules/skills/components/skills/skills.component.ts file, you need to change the import statements to reflect the new file paths.

skills.component.ts file:

import { Component, OnInit } from '@angular/core';
import { Skill } from '../../../../shared/models/skill';

import { SkillsService } from '../../services/skills.service';

// ...
You are now accessing the correct files and folders for your SkillsComponent.
Within the modules/skills/services/skills.service.ts file, you need to change the import statements for Skill and Level, as shown below.

skills.service.ts file:

import { Injectable } from '@angular/core';

import { Skill } from '../../../shared/models/skill';
import { Level } from '../../../shared/types/level.enum';
import { Observable, of } from 'rxjs';

// ...
Your SkillsComponent and SkillsService now have the correct file paths. Nice work!

Skills Module
Currently, the app.module.ts file contains the information needed for the SkillsComponent. Because you created a module for the SkillsComponent, you need to move any reference to the SkillsComponent into the skills.module.ts file. Follow the steps below to accomplish this.

First, move the import statements for the SkillsComponent and SkillsService from the app.module.ts file and into the skills.module.ts file, as shown below.

skills.module.ts file:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { SkillsComponent } from './skills/skills.component';
import { SkillsService } from './services/skills.service';

@NgModule({
    imports: [CommonModule],
    declarations: []
})
export class SkillsModule {}
After moving these, your app.module.ts file should now look like the following.

app.module.ts file:

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';

import { AppComponent } from './app.component';

import { GreetingComponent } from './greeting/greeting.component';
import { MessageFormComponent } from './message-form/message-form.component';

@NgModule({
    declarations: [AppComponent, SkillsComponent, GreetingComponent, MessageFormComponent],
    imports: [BrowserModule, FormsModule],
    providers: [SkillsService],
    bootstrap: [AppComponent]
})
export class AppModule {}
Next, you need to change the file path to the skills component and service, this is because the skills.module.ts file is not in the same place as the app.module.ts file, so it will take a different file path to access those imported files. You have moved these files into new folders, which need to be accounted for. Change the two import statements to be the following.

skills.module.ts file:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { SkillsComponent } from './components/skills/skills.component';
import { SkillsService } from './services/skills.service';

@NgModule({
    imports: [CommonModule],
    declarations: []
})
export class SkillsModule {}
Since the folders components and services live at the same level as the skills.module.ts file, you need to use the ./ syntax.
You should notice that there are still errors within the app.module.ts file, this is because the module is using the SkillsComponent and SkillsService but, you have removed all references to those files. You now need to remove the SkillsComponent from the array of declarations in the app.module.ts file and add it to the array of declarations within the skills.module.ts file.

skills.module.ts file:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { SkillsComponent } from './components/skills/skills.component';
import { SkillsService } from './services/skills.service';

@NgModule({
    imports: [CommonModule],
    declarations: [SkillsComponent]
})
export class SkillsModule {}
Next, you need to remove the SkillsService from the array of providers in the app.module.ts file and add it to the array of providers within the skills.module.ts file.

skills.module.ts file:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { SkillsComponent } from './components/skills/skills.component';
import { SkillsService } from './services/skills.service';

@NgModule({
    imports: [CommonModule],
    declarations: [SkillsComponent],
    providers: [SkillsService]
})
export class SkillsModule {}
Your app.module.ts file should now look like the following.

app.module.ts file:

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';

import { AppComponent } from './app.component';

import { GreetingComponent } from './greeting/greeting.component';
import { MessageFormComponent } from './message-form/message-form.component';

@NgModule({
    declarations: [AppComponent, GreetingComponent, MessageFormComponent],
    imports: [BrowserModule, FormsModule],
    providers: [],
    bootstrap: [AppComponent]
})
export class AppModule {}
Notice that you are still getting errors for the last two import statements, this will be fixed shortly.
Next, you need to export the SkillsModule so you can access it within the app.module.ts file. Add the following exports array within the skills.module.ts file.

skills.module.ts file:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { SkillsComponent } from './components/skills/skills.component';
import { SkillsService } from './services/skills.service';

@NgModule({
    imports: [CommonModule],
    declarations: [SkillsComponent],
    exports: [SkillsComponent],
    providers: [SkillsService]
})
export class SkillsModule { }
Lastly, add an import statement to import the SkillsModule into the app.module.ts file. Also, add it to the imports array, as shown below.

app.module.ts file:

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';

import { AppComponent } from './app.component';

import { GreetingComponent } from './greeting/greeting.component';
import { MessageFormComponent } from './message-form/message-form.component';

import { SkillsModule } from './modules/skills/skills.module';

@NgModule({
    declarations: [AppComponent, GreetingComponent, MessageFormComponent],
    imports: [BrowserModule, FormsModule, SkillsModule],
    providers: [],
    bootstrap: [AppComponent]
})
export class AppModule {}
Greeting and Message-Form Components
You have fixed all file paths that have to do with the SkillsComponent, but you need to fix the file paths for both the MessageForm and Greeting components. Follow the below steps.

The MessageForm component is currently accessing the models folder but in the wrong place. Fix the import statement within the shared/components/message-form.component.ts file, as shown below:

import { Component, OnInit } from '@angular/core';
import { Message } from '../../models/message';
Next, you need to fix the import statements within the app.module.ts file that are trying to access the MessageForm and Greeting components, as shown below:

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';

import { AppComponent } from './app.component';

import { GreetingComponent } from './shared/components/greeting/greeting.component';
import { MessageFormComponent } from './shared/components/message-form/message-form.component';

// ...
Great work! Make sure your server is running with ng serve and navigate to localhost:4200. Your page should now be rendering the same as before you changed the structure of your project. Phew! You did it!

Previous
Next

For your Lesson 6 Practice Hands-On, you are going to be practicing creating a module, moving files, and changing file paths.
Requirements
Step 1
Create a new module using the Angular CLI called message-form.
Try to use the shortcuts of g and m when using the Angular CLI.
Change the file structure. Move the message-form folder and its files into the message-form module.
The message-form folder should live within a components folder.
Change the import statement to correctly import the Message model within the MessageForm component.
Import the MessageFormComponent into the MessageFormModule.
Add the MessageFormComponent to the necessary arrays within the MessageFormModule.
Add the necessary FormsModule references within the MessageFormModule.
Import the MessageFormModule into the AppModule correctly.
Within the AppModule, add and remove the necessary values from the declarations and imports arrays to reflect the use of the MessageFormModule.
You will need to remove the references to the MessageFormComponent.


Solution
Below, is the solution to the Lesson 6 Practice Hands-On.

Your file structure should now look like the following:

src/app folder structure:

- modules
    - message-form
        - components
            - message-form
                - message-form.component.css
                - message-form.component.html
                - message-form.component.spec.ts
                - message-form.component.ts
    - skills
        - components
            - skills
                - skills.component.css
                - skills.component.html
                - skills.component.spec.ts
                - skills.component.ts
        - services
            - skills.service.spec.ts
            - skills.service.ts
        - skills.module.spec.ts
        - skills.module.ts
- shared
    - components
        - greeting
            - greeting.component.css
            - greeting.component.html
            - greeting.component.spec.ts
            - greeting.component.ts
    - models
        - skill.ts
        - message.ts
    - types
        - level.enum.ts
- app.component.css
- app.component.html
- app.component.spec.ts
- app.component.ts
- app.module.ts
message-form.component.ts file:

import { Component, OnInit } from '@angular/core';
import { Message } from '../../../../shared/models/message';

@Component({
  selector: 'app-message-form',
  templateUrl: './message-form.component.html',
  styleUrls: ['./message-form.component.css']
})
export class MessageFormComponent implements OnInit {
  model: Message = new Message();
  constructor() { }

  ngOnInit() {
  }

  onSubmit() {
    console.log('Submit Successful: ', this.model);
  }
}
message-form.module.ts file:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import { MessageFormComponent } from './components/message-form/message-form.component';

@NgModule({
  imports: [
    CommonModule, FormsModule
  ],
  declarations: [MessageFormComponent],
  exports: [MessageFormComponent]
})
export class MessageFormModule { }
app.module.ts file:

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';

import { AppComponent } from './app.component';

import { GreetingComponent } from './shared/components/greeting/greeting.component';
import { MessageFormModule } from './modules/message-form/message-form.module';

import { SkillsModule } from './modules/skills/skills.module';

@NgModule({
    declarations: [AppComponent, GreetingComponent],
    imports: [BrowserModule, FormsModule, SkillsModule, MessageFormModule],
    providers: [],
    bootstrap: [AppComponent]
})
export class AppModule {}

